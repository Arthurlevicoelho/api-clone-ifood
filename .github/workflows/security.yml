name: security-api

on:
  push:
    branches:
      - develop

env:
  DEFECTDOJO_URL: https://691a-2804-29b8-5004-2d94-15a4-3176-ed6a-abfd.ngrok-free.app
  SONARQUBE_URL: https://f858-2804-29b8-5004-2d94-15a4-3176-ed6a-abfd.ngrok-free.app
  DEFECTDOJO_API_VERSION: v2

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify -Ddependency-check.skip=true org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=api -DskipTests

      - name: Install sonar-report
        run: npm install -g sonar-report

      - name: Generate SonarQube report
        run: |
          sonar-report --sonarurl=${{ secrets.SONAR_HOST_URL }} --sonartoken=${{ secrets.SONAR_TOKEN }} --sonarcomponent=${{ secrets.SONARQUBE_PROJECT_KEY }} --project=api --branch=main --release=1.0.0 --save-report-json=sonar-report.json


      - name: Import to DefectDojo
        run: |
          curl -k -X POST "https://691a-2804-29b8-5004-2d94-15a4-3176-ed6a-abfd.ngrok-free.app" \
            -H "Authorization: Token 6e482a959eefdd5e09dfe983f010a443c2616a74" \
            -H "Content-Type: multipart/form-data" \
            -F "scan_type=SonarQube Scan" \
            -F "file=@target/sonarqube_report.json" \
            -F "engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}" \
            -F "verified=true" \
            -F "active=true"

         
      # - name: Enviar relatório para API
      #   run: |
      #     curl -v -X POST "https://50cf-2804-29b8-5004-8382-b30e-9893-1b68-4d59.ngrok-free.app/api/v2/import-scan/" \
      #       -H "Authorization: Token 6e482a959eefdd5e09dfe983f010a443c2616a74" \
      #       -F "scan_type=SpotBugs Scan" \
      #       -F "file=@/home/runner/work/api-clone-ifood/api-clone-ifood/target" \
      #       -F "product_name=api-clone-ifood" \
      #       -F "engagement_name=Teste-Manual-$(date +%Y%m%d)" \
      #       -F "auto_create_context=true"

      # SCA - OWASP Dependency-Check
      # - name: Run OWASP Dependency-Check
      #   run: |
      #     mvn dependency-check:check -Dformat=XML
      #     curl -X POST "https://50cf-2804-29b8-5004-8382-b30e-9893-1b68-4d59.ngrok-free.app/api/v2/import-scan/" \
      #       -H "Authorization: Token 6e482a959eefdd5e09dfe983f010a443c2616a74" \
      #       -F "scan_type=Dependency Check Scan" \
      #       -F "file=@/home/runner/work/api-clone-ifood/api-clone-ifood/target/dependency-check-report.xml" \
      #       -F "engagement=1"

      - name: Notify telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            O evento ${{ github.event_name }} realizou a pipeline ${{ github.workflow }}.
            *Repositorio*: [${{ github.repository }}](${{ github.repo.url }})  
            Quem realizou o commit: ${{ github.event.commits[0].author.name }}
            Mensagem do commit: ${{ github.event.commits[0].message }}.
            *Relatórios de segurança enviados para o DefectDojo*
